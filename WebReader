/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
              DER PFAD DER .txt - DATEIEN MUSS ANGEPASST WERDEN
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

package Vertretungsplan;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;                                                            //imports

public class WebReader
{
    public static Vertretung[] webreader (String tag) 
            throws MalformedURLException, IOException                           //Main für das Scannen
    {
        int anzahlSeiten;
        URL[] url;
        url = new URL[9];                                                      //URL der zu scannenen Seite
        String[] pfade;
        pfade = new String[9];
        for (int i=0; i<9; i++)
        {
            url[i] = new URL("http://lisemeitnerschule.de/Internet_SuS_" + tag 
                    + "/subst_00" + (i+1) + ".htm");
            pfade[i] = "M:\\Schule\\Informatik-Projektkurs\\"
                + "Vertretungsplan\\src\\Vertretungsplan\\"
                + "VertretungsplanSeite0" + (i+1) + tag + ".txt";
        }
        Vertretung[] tempVertretungen;
        tempVertretungen = new Vertretung[15];
        Vertretung[] vertretungen;
        vertretungen = new Vertretung[150];
        
        
        anzahlSeiten = seiten(url[0], pfade[0]);
        tempVertretungen = auslesen(url[0], pfade[0]);
        System.arraycopy(tempVertretungen, 0, vertretungen, 0, 15);
        
        if (anzahlSeiten > 1)
        {                                             //URL der zu scannenden Seite
            tempVertretungen = auslesen(url[1], pfade[1]);
            System.arraycopy(tempVertretungen, 0, vertretungen, 15, 15);        //Arrays werden zusammengetragen
        }
        
        if (anzahlSeiten > 2)
        {                                                 //URL der zu scannenden Seite
            tempVertretungen = auslesen(url[2],pfade[2]);
            System.arraycopy(tempVertretungen, 0, vertretungen, 30, 15);        //Arrays werden zusammengetragen
        }
        
        if (anzahlSeiten > 3)
        {                                                 //URL der zu scannenden Seite
            tempVertretungen = auslesen(url[3], pfade[3]);
            System.arraycopy(tempVertretungen, 0, vertretungen, 45, 15);        //Arrays werden zusammengetragen
        }
        
        if (anzahlSeiten > 4)
        {                                                //URL der zu scannenden Seite
            tempVertretungen = auslesen(url[4], pfade[4]);
            System.arraycopy(tempVertretungen, 0, vertretungen, 60, 15);        //Arrays werden zusammengetragen
        }
        
        if (anzahlSeiten > 5)
        {                                               //URL der zu scannenden Seite
            tempVertretungen = auslesen(url[5], pfade[5]);
            System.arraycopy(tempVertretungen, 0, vertretungen, 75, 15);        //Arrays werden zusammengetragen
        }
        
        if (anzahlSeiten > 6)
        {                                                //URL der zu scannenden Seite
            tempVertretungen = auslesen(url[6], pfade[6]);
            System.arraycopy(tempVertretungen, 0, vertretungen, 90, 15);        //Arrays werden zusammengetragen
        }
        
        if (anzahlSeiten > 7)
        {                                                //URL der zu scannenden Seite
            tempVertretungen = auslesen(url[7], pfade[7]);
            System.arraycopy(tempVertretungen, 0, vertretungen, 105, 15);       //Arrays werden zusammengetragen
        }
        
        if (anzahlSeiten > 8)
        {                                                //URL der zu scannenden Seite
            tempVertretungen = auslesen(url[8], pfade[8]);
            System.arraycopy(tempVertretungen, 0, vertretungen, 120, 15);       //Arrays werden zusammengetragen
        }
        return vertretungen;
    }
    
    private static Vertretung[] auslesen (URL url, String datei) 
            throws IOException 
    {
        String gescannt;                                                        //Zwischenspeicher für den Code
        String[] tabelle;
        tabelle = new String[1000];                                             //Definition des Arrays, in dem die Daten zwischengespeichert
        Vertretung[] vertretungen;
        vertretungen = new Vertretung[15];                                      //Rückgabearray
        
        
        try 
        {
          gescannt = scan (url);
        } 
        catch (Exception fehler)                                                //Notlösung über .txt-Datei (FUNKTIONIERT NICHT!!!)
        {
          gescannt = IOStream.printDatei(datei);
        }                                                                       //Scannen und Speichern der Website
        gescannt = tabelleExtrahieren(gescannt, "Text", "Lise");                //Tabelle aus dem Quellcode herausfiltern
        gescannt = tabelleBereinigen(gescannt);                                 //Aufeinanderfolgende leere Felder vereinen
        tabelle = gescannt.split("''");                                         //Trennen der einzelnen Daten
        
        vertretungen = selektieren(tabelle);                                    //Daten in Objekte umwandeln
        
        return vertretungen;
        
        
    }
      
    private static int seiten (URL url, String datei) 
            throws MalformedURLException
    {
        String gescannt;                                                        //Zwischenspeicher für den Code
        char vorläufigeSeitenzahl;                                              //vorläufige Variable für die extrahierte Seitenzahl
        int seitenzahl;                                                         //Rückgabevariable
        
        
        try 
        {
          gescannt = scan (url);
        } 
        catch (Exception fehler)
        {
          gescannt = IOStream.printDatei(datei);
        }                                                                       //Scannen und Speichern der Website
        gescannt = tabelleExtrahieren(gescannt, "Seite", "zu");                 //Tabelle aus dem Quellcode herausfiltern
        gescannt = tabelleBereinigen(gescannt);                                 //Aufeinanderfolgende leere Felder vereinen
        
        vorläufigeSeitenzahl = gescannt.charAt(5);                              //Ermitteln der Gesamtseitenzahl, die an 5. Stelle des wichtigen Teils steht
        seitenzahl = (int) (vorläufigeSeitenzahl-'0');                          //Parsen der Seitenzahl von Character zu Integer
        
        return seitenzahl;                                                      //Zurückgeben der Gesamtseitenzahl
    }
  
    private static String scan (URL url) throws IOException                     //Scannen und Speichern der Website
    {
        BufferedReader r;
        r = new BufferedReader(new InputStreamReader(url.openStream()));
        String rückgabe = null;
        String line = null;
        
        
        while((line=r.readLine())!=null)
        {
          rückgabe += line + "\n";
        }
        
        return rückgabe;                                                        //Der originale Quellcode wird zurückgegeben
      }
      
    private static String tabelleExtrahieren (String quellcode, String start, 
            String ende)                                                        //Tabelle aus dem Quellcode herausfiltern !!!AUS DEM INTERNET!!!
    {
        String rückgabe;                                                        //Rückgabevariable
        String[] wichtig;                                                       //Zwischenspeicher
        
        
        wichtig = quellcode.split(start);                                       //Beginn des wichtigen Teils des Codes bei übergebenen Variable
        wichtig = wichtig[1].split(ende);                                       //Ende des wichtigen Teils des Codes bei übergebenen Variable
        rückgabe = wichtig[0];                                                  //Übergeben des wichtigen Teils
        rückgabe = rückgabe.replaceAll("\\<.*?\\>", "''");                      //Löschen aller HTML-Ausdrücke und Ersetzen dieser durch "''"
        rückgabe = rückgabe.replaceAll("(&nbsp)", "''");                        //Löschen aller Leerzeichen und Ersetzen dieser durch "''"
        rückgabe = rückgabe.replaceAll(";", "''");                              //Löschen aller Semikolons und Ersetzen dieser durch "''"
        
        return rückgabe;                                                        //Die herausgelöste und von störenden Anweisungen befreite Tabelle wird zurückgegeben
    }
      
    private static String tabelleBereinigen(String start)                       //Aufeinanderfolgende leere Felder vereinen
    {
        String rückgabe;
        
        
        rückgabe = start.replaceAll("Entfall", "''");                           //Löschen der Information "Entfall", um eine strukturierte Tabelle ohne leere Felder zu erhalten
        for (int i= 0; i<5; i++)
        {
            rückgabe = rückgabe.replaceAll("''''", "''");                       //Doppelte leere Felder zu einem vereinen
        }                                                                       //Wiederholung dieses Arbeitsschritts, um zweifelslos jede doppelte leere Zelle zu erwischen
        return rückgabe;                                                        //Die bereinigte Tabelle wird zurückgegeben
    }
      
    private static void tabelleAusgeben(String[] start)                         //gibt alle gefundenen Zellen der Tabelle aus (nur in der Entwicklungsphase zur Diagnose verwendet)
    {
        System.out.print("\t\t|\tKlasse(n)\t|\tStunden \t|\t(Fach) "
                + "\t\t|\t(Lehrer) \t|\tVertreter \t|\tFach \t\t|\tRaum "
                + "\t\t|\tVertretungstext \n\t\t"
                + "-----------------------------------------------------------"
                + "-----------------------------------------------------------"
                + "-----------------------------------------------------------"
                + "------------------------\n");                                //Ausgeben der ersten Tabellenzeile
        for (int i = 2; i<start.length-3; i++) {
            System.out.print("\t\t\t" + start[i]);
        }                                                                       //Ausgeben der Tabelle
    }
    
    private static Vertretung[] selektieren(String[] start)                     //wandelt jede Zeile der Tabelle in ein Objekt der Klasse Vertretung um
    {
        int zähler1 = 2;                                                        //Zählvariable für das Ursprungsarray
        int zähler2 = 0;                                                        //Zählvariable für das Rückgabearray
        Vertretung[] rückgabe = new Vertretung[15];                             //Rückgabearray
        
        for (String start1 : start) {
            if (start[zähler1+9] != null) {                                     
                if (start[zähler1+9].matches("[1]?[0-9](\\s[-]\\s[1]?[0-9])?")) //Überprüfung, ob ein Vertretungstext vorhanden ist
                {
                    rückgabe[zähler2] = new Vertretung(start[zähler1+0],
                            start[zähler1+1], start[zähler1+2],
                            start[zähler1+3], start[zähler1+4], 
                            start[zähler1+5], start[zähler1+6]);                //Objekt ohne Vertretungstext wird erstellt
                    zähler1 += 8;
                    zähler2 ++;                                                 //Zähler werden erhöht
                } else if (start[zähler1+10].matches("[1]?[0-9]"
                        + "(\\s[-]\\s[1]?[0-9])?"))
                {
                    rückgabe[zähler2] = new Vertretung(start[zähler1+0],
                            start[zähler1+1], start[zähler1+2],
                            start[zähler1+3], start[zähler1+4],
                            start[zähler1+5], start[zähler1+6], 
                            start[zähler1+7]);                                  //Vertretung mit Vertretungstext wird erstellt
                    zähler1 += 9;
                    zähler2 ++;                                                 //Zähler werden erhöht
                }
            }
        }
        
        if (start[zähler1+7] == null)                                           //Überprüfung, ob die letzte Zeile einen Vertretungstext hat
        {
            rückgabe[zähler2] = new Vertretung(start[zähler1+0], 
                            start[zähler1+1], start[zähler1+2], 
                            start[zähler1+3], start[zähler1+4], 
                            start[zähler1+5], start[zähler1+6]);                //Objekt ohne Vertretungstext wird erstellt
        } else {
            rückgabe[zähler2] = new Vertretung(start[zähler1+0], 
                            start[zähler1+1], start[zähler1+2], 
                            start[zähler1+3], start[zähler1+4], 
                            start[zähler1+5], start[zähler1+6], 
                            start[zähler1+7]);                                  //Vertretung mit Vertretungstext wird erstellt
        }
        
    return rückgabe;                                                            //Zurückgeben des Arrays, in dem die Vertretungen gespeichert sind
    }
    
}
